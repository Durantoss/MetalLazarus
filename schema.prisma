datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

model User {
  id          String       @id @default(cuid())
  email       String?      @unique
  stagename   String?
  createdAt   DateTime     @default(now())
  passkeys    Passkey[]
  sessions    Session[]
  credentials Credential[] // Legacy password auth
  consents    Consent[]    // Consent tracking
}

// Legacy password-based credentials (for migration compatibility)
model Credential {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credId    String   // Legacy credential identifier
  publicKey Bytes    // Hashed password stored as bytes
  counter   Int      @default(0)
  createdAt DateTime @default(now())

  @@index([userId])
}

// Consent tracking model
model Consent {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  purpose   String
  scope     String
  createdAt DateTime @default(now())

  @@index([userId])
}

// One row per registered passkey (aka credential)
model Passkey {
  id           String   @id // credentialId (base64url)
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicKey    String   // credentialPublicKey (base64url)
  counter      Int      @default(0)
  transports   String?  // CSV from response.transports
  deviceName   String?
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @updatedAt

  @@index([userId])
}

// Persist challenges to avoid in-memory state in serverless
model WebAuthnChallenge {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "registration" | "authentication"
  challenge String
  createdAt DateTime @default(now())

  @@index([userId, type])
  @@index([createdAt])
}

// Session model for authentication tracking
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId  String?
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@index([userId])
}
